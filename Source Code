# Car Price Prediction using Machine Learning (Fixed Version)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# -------------------------
# Load Dataset
# -------------------------
df = pd.read_csv("car data.csv")

print("Dataset Preview:")
print(df.head())

# -------------------------
# Data Preprocessing
# -------------------------
# Drop Car_Name as it's not useful for prediction
if 'Car_Name' in df.columns:
    df = df.drop(columns=['Car_Name'])

# Encode categorical features
categorical_cols = ['Fuel_Type', 'Seller_Type', 'Transmission', 'Selling_type']  # include both spellings just in case
for col in categorical_cols:
    if col in df.columns:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])

# Define features (X) and target (y)
X = df.drop(columns=['Selling_Price'])
y = df['Selling_Price']

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# -------------------------
# Train-Test Split
# -------------------------
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42
)

# -------------------------
# Model Training
# -------------------------
model = LinearRegression()
model.fit(X_train, y_train)

# -------------------------
# Predictions & Evaluation
# -------------------------
y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print("\nModel Performance:")
print(f"MAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# -------------------------
# Visualization
# -------------------------
# Actual vs Predicted
plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted Car Prices")
plt.show()

# Residuals distribution
residuals = y_test - y_pred
plt.figure(figsize=(8,6))
sns.histplot(residuals, kde=True, bins=20)
plt.title("Residuals Distribution")
plt.show()
